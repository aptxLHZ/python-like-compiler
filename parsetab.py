
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMAleftEQNEQLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEASSIGN COLON COMMA DEDENT DEF DIVIDE ELSE EQ FOR GT GTE IDENTIFIER IF IN INDENT LPAREN LT LTE MINUS NEQ NEWLINE NUMBER PLUS PRINT RETURN RPAREN STRING TIMES WHILE\n    program : optional_newlines statement_sequence\n    \n    optional_newlines : optional_newlines NEWLINE\n                      | empty\n    \n    statement_sequence : statement_plus_optional_newlines\n                       | empty\n    \n    statement_plus_optional_newlines : statement_plus_optional_newlines statement_with_trailing_newlines\n                                     | statement_with_trailing_newlines\n    \n    statement_with_trailing_newlines : statement optional_newlines_after_statement\n                                     | NEWLINE\n    \n    optional_newlines_after_statement : optional_newlines_after_statement NEWLINE\n                                      | empty\n    \n    statement : assignment_statement\n              | print_statement\n              | if_statement\n              | while_statement\n              | for_statement\n               | function_def_statement\n              | return_statement\n              | expression_statement\n    \n    assignment_statement : IDENTIFIER ASSIGN expression\n    \n    print_statement : PRINT LPAREN expression RPAREN\n    \n    expression_statement : expression\n    \n    function_def_statement : DEF IDENTIFIER LPAREN parameter_list RPAREN COLON suite\n    \n    parameter_list : param_items\n                   | empty\n    \n    param_items : param_items COMMA IDENTIFIER\n                | IDENTIFIER\n    \n    return_statement : RETURN expression\n    \n    if_statement : IF condition COLON suite\n                 | IF condition COLON suite ELSE COLON suite\n    \n    while_statement : WHILE condition COLON suite\n    \n    for_statement : FOR IDENTIFIER IN expression COLON suite\n    \n    suite : NEWLINE INDENT statement_sequence DEDENT\n    \n    condition : expression\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression EQ expression\n               | expression NEQ expression\n               | expression LT expression\n               | expression LTE expression\n               | expression GT expression\n               | expression GTE expression\n    \n    expression : LPAREN expression RPAREN\n    \n    expression : IDENTIFIER\n    \n    expression : NUMBER\n    \n    expression : STRING\n    \n    expression : factor\n    \n    factor : IDENTIFIER\n           | NUMBER\n           | STRING\n           | function_call\n    \n    function_call : IDENTIFIER LPAREN argument_list RPAREN\n    \n    argument_list : arg_items\n                  | empty\n    \n    arg_items : arg_items COMMA expression\n              | expression\n    \n    empty :\n    '
    
_lr_action_items = {'NEWLINE':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,74,75,78,80,81,83,91,92,95,97,98,100,101,102,],[-59,5,-3,-2,32,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,56,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,82,82,-54,-21,-29,-31,32,82,82,-32,82,-30,-33,-23,]),'IDENTIFIER':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,76,77,78,79,80,81,83,91,94,97,100,101,102,],[-59,18,-3,-2,18,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,49,49,49,53,54,49,-47,-48,-49,-53,-6,-9,-8,-11,49,49,49,49,49,49,49,49,49,49,49,49,49,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,49,85,-54,49,-21,-29,-31,18,99,-32,-30,-33,-23,]),'PRINT':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,78,80,81,83,91,97,100,101,102,],[-59,20,-3,-2,20,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,-8,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-21,-29,-31,20,-32,-30,-33,-23,]),'IF':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,78,80,81,83,91,97,100,101,102,],[-59,22,-3,-2,22,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,-8,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-21,-29,-31,22,-32,-30,-33,-23,]),'WHILE':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,78,80,81,83,91,97,100,101,102,],[-59,23,-3,-2,23,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,-8,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-21,-29,-31,23,-32,-30,-33,-23,]),'FOR':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,78,80,81,83,91,97,100,101,102,],[-59,24,-3,-2,24,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,-8,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-21,-29,-31,24,-32,-30,-33,-23,]),'DEF':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,78,80,81,83,91,97,100,101,102,],[-59,25,-3,-2,25,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,-8,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-21,-29,-31,25,-32,-30,-33,-23,]),'RETURN':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,78,80,81,83,91,97,100,101,102,],[-59,26,-3,-2,26,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,-8,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-21,-29,-31,26,-32,-30,-33,-23,]),'LPAREN':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,54,55,56,57,62,63,64,65,66,67,68,69,70,71,73,76,78,79,80,81,83,91,97,100,101,102,],[-59,21,-3,-2,21,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,36,-22,47,21,21,21,21,-47,-48,-49,-53,-6,-9,-8,-11,21,21,21,21,21,21,21,21,21,21,21,21,21,36,77,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,21,-54,21,-21,-29,-31,21,-32,-30,-33,-23,]),'NUMBER':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,76,78,79,80,81,83,91,97,100,101,102,],[-59,27,-3,-2,27,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,27,27,27,27,-47,-48,-49,-53,-6,-9,-8,-11,27,27,27,27,27,27,27,27,27,27,27,27,27,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,27,-54,27,-21,-29,-31,27,-32,-30,-33,-23,]),'STRING':([0,2,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,76,78,79,80,81,83,91,97,100,101,102,],[-59,28,-3,-2,28,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,28,28,28,28,-47,-48,-49,-53,-6,-9,-8,-11,28,28,28,28,28,28,28,28,28,28,28,28,28,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,28,-54,28,-21,-29,-31,28,-32,-30,-33,-23,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,78,80,81,83,97,100,101,102,],[-59,0,-59,-3,-1,-2,-4,-5,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,-8,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-21,-29,-31,-32,-30,-33,-23,]),'DEDENT':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,27,28,29,30,31,32,33,34,49,55,56,57,62,63,64,65,66,67,68,69,70,71,73,78,80,81,83,91,96,97,100,101,102,],[-4,-5,-7,-59,-12,-13,-14,-15,-16,-17,-18,-19,-46,-22,-47,-48,-49,-53,-6,-9,-8,-11,-46,-28,-10,-20,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-21,-29,-31,-59,101,-32,-30,-33,-23,]),'ASSIGN':([18,],[35,]),'PLUS':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,37,-47,-48,-49,-53,37,-46,37,37,37,37,-35,-36,-37,-38,37,37,37,37,37,37,37,-45,-54,37,37,]),'MINUS':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,38,-47,-48,-49,-53,38,-46,38,38,38,38,-35,-36,-37,-38,38,38,38,38,38,38,38,-45,-54,38,38,]),'TIMES':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,39,-47,-48,-49,-53,39,-46,39,39,39,39,39,39,-37,-38,39,39,39,39,39,39,39,-45,-54,39,39,]),'DIVIDE':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,40,-47,-48,-49,-53,40,-46,40,40,40,40,40,40,-37,-38,40,40,40,40,40,40,40,-45,-54,40,40,]),'EQ':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,41,-47,-48,-49,-53,41,-46,41,41,41,41,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,41,-45,-54,41,41,]),'NEQ':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,42,-47,-48,-49,-53,42,-46,42,42,42,42,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,42,-45,-54,42,42,]),'LT':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,43,-47,-48,-49,-53,43,-46,43,43,43,43,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,43,-45,-54,43,43,]),'LTE':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,44,-47,-48,-49,-53,44,-46,44,44,44,44,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,44,-45,-54,44,44,]),'GT':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,45,-47,-48,-49,-53,45,-46,45,45,45,45,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,45,-45,-54,45,45,]),'GTE':([18,19,27,28,29,30,48,49,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,73,78,84,89,],[-46,46,-47,-48,-49,-53,46,-46,46,46,46,46,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,46,-45,-54,46,46,]),'RPAREN':([27,28,29,30,36,48,49,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,78,85,86,87,88,89,99,],[-47,-48,-49,-53,-59,73,-46,78,-55,-56,-58,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,80,-45,-59,-54,-27,93,-24,-25,-57,-26,]),'COLON':([27,28,29,30,49,50,51,52,62,63,64,65,66,67,68,69,70,71,73,78,84,90,93,],[-47,-48,-49,-53,-46,74,-34,75,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,92,95,98,]),'COMMA':([27,28,29,30,49,59,61,62,63,64,65,66,67,68,69,70,71,73,78,85,87,89,99,],[-47,-48,-49,-53,-46,79,-58,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-54,-27,94,-57,-26,]),'IN':([53,],[76,]),'ELSE':([81,101,],[90,-33,]),'INDENT':([82,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'optional_newlines':([0,],[2,]),'empty':([0,2,9,36,77,91,],[3,7,34,60,88,7,]),'statement_sequence':([2,91,],[4,96,]),'statement_plus_optional_newlines':([2,91,],[6,6,]),'statement_with_trailing_newlines':([2,6,91,],[8,31,8,]),'statement':([2,6,91,],[9,9,9,]),'assignment_statement':([2,6,91,],[10,10,10,]),'print_statement':([2,6,91,],[11,11,11,]),'if_statement':([2,6,91,],[12,12,12,]),'while_statement':([2,6,91,],[13,13,13,]),'for_statement':([2,6,91,],[14,14,14,]),'function_def_statement':([2,6,91,],[15,15,15,]),'return_statement':([2,6,91,],[16,16,16,]),'expression_statement':([2,6,91,],[17,17,17,]),'expression':([2,6,21,22,23,26,35,36,37,38,39,40,41,42,43,44,45,46,47,76,79,91,],[19,19,48,51,51,55,57,61,62,63,64,65,66,67,68,69,70,71,72,84,89,19,]),'factor':([2,6,21,22,23,26,35,36,37,38,39,40,41,42,43,44,45,46,47,76,79,91,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'function_call':([2,6,21,22,23,26,35,36,37,38,39,40,41,42,43,44,45,46,47,76,79,91,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'optional_newlines_after_statement':([9,],[33,]),'condition':([22,23,],[50,52,]),'argument_list':([36,],[58,]),'arg_items':([36,],[59,]),'suite':([74,75,92,95,98,],[81,83,97,100,102,]),'parameter_list':([77,],[86,]),'param_items':([77,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> optional_newlines statement_sequence','program',2,'p_program','parser_rules.py',25),
  ('optional_newlines -> optional_newlines NEWLINE','optional_newlines',2,'p_optional_newlines','parser_rules.py',33),
  ('optional_newlines -> empty','optional_newlines',1,'p_optional_newlines','parser_rules.py',34),
  ('statement_sequence -> statement_plus_optional_newlines','statement_sequence',1,'p_statement_sequence','parser_rules.py',43),
  ('statement_sequence -> empty','statement_sequence',1,'p_statement_sequence','parser_rules.py',44),
  ('statement_plus_optional_newlines -> statement_plus_optional_newlines statement_with_trailing_newlines','statement_plus_optional_newlines',2,'p_statement_plus_optional_newlines','parser_rules.py',55),
  ('statement_plus_optional_newlines -> statement_with_trailing_newlines','statement_plus_optional_newlines',1,'p_statement_plus_optional_newlines','parser_rules.py',56),
  ('statement_with_trailing_newlines -> statement optional_newlines_after_statement','statement_with_trailing_newlines',2,'p_statement_with_trailing_newlines','parser_rules.py',71),
  ('statement_with_trailing_newlines -> NEWLINE','statement_with_trailing_newlines',1,'p_statement_with_trailing_newlines','parser_rules.py',72),
  ('optional_newlines_after_statement -> optional_newlines_after_statement NEWLINE','optional_newlines_after_statement',2,'p_optional_newlines_after_statement','parser_rules.py',83),
  ('optional_newlines_after_statement -> empty','optional_newlines_after_statement',1,'p_optional_newlines_after_statement','parser_rules.py',84),
  ('statement -> assignment_statement','statement',1,'p_statement','parser_rules.py',92),
  ('statement -> print_statement','statement',1,'p_statement','parser_rules.py',93),
  ('statement -> if_statement','statement',1,'p_statement','parser_rules.py',94),
  ('statement -> while_statement','statement',1,'p_statement','parser_rules.py',95),
  ('statement -> for_statement','statement',1,'p_statement','parser_rules.py',96),
  ('statement -> function_def_statement','statement',1,'p_statement','parser_rules.py',97),
  ('statement -> return_statement','statement',1,'p_statement','parser_rules.py',98),
  ('statement -> expression_statement','statement',1,'p_statement','parser_rules.py',99),
  ('assignment_statement -> IDENTIFIER ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser_rules.py',116),
  ('print_statement -> PRINT LPAREN expression RPAREN','print_statement',4,'p_print_statement','parser_rules.py',124),
  ('expression_statement -> expression','expression_statement',1,'p_expression_statement','parser_rules.py',131),
  ('function_def_statement -> DEF IDENTIFIER LPAREN parameter_list RPAREN COLON suite','function_def_statement',7,'p_function_def_statement','parser_rules.py',140),
  ('parameter_list -> param_items','parameter_list',1,'p_parameter_list','parser_rules.py',147),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','parser_rules.py',148),
  ('param_items -> param_items COMMA IDENTIFIER','param_items',3,'p_param_items','parser_rules.py',154),
  ('param_items -> IDENTIFIER','param_items',1,'p_param_items','parser_rules.py',155),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser_rules.py',165),
  ('if_statement -> IF condition COLON suite','if_statement',4,'p_if_statement','parser_rules.py',175),
  ('if_statement -> IF condition COLON suite ELSE COLON suite','if_statement',7,'p_if_statement','parser_rules.py',176),
  ('while_statement -> WHILE condition COLON suite','while_statement',4,'p_while_statement','parser_rules.py',188),
  ('for_statement -> FOR IDENTIFIER IN expression COLON suite','for_statement',6,'p_for_statement','parser_rules.py',195),
  ('suite -> NEWLINE INDENT statement_sequence DEDENT','suite',4,'p_suite','parser_rules.py',212),
  ('condition -> expression','condition',1,'p_condition','parser_rules.py',220),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser_rules.py',228),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser_rules.py',229),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser_rules.py',230),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser_rules.py',231),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser_rules.py',232),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser_rules.py',233),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser_rules.py',234),
  ('expression -> expression LTE expression','expression',3,'p_expression_binop','parser_rules.py',235),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser_rules.py',236),
  ('expression -> expression GTE expression','expression',3,'p_expression_binop','parser_rules.py',237),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser_rules.py',247),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser_rules.py',257),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser_rules.py',264),
  ('expression -> STRING','expression',1,'p_expression_string','parser_rules.py',271),
  ('expression -> factor','expression',1,'p_expression_factor','parser_rules.py',278),
  ('factor -> IDENTIFIER','factor',1,'p_factor','parser_rules.py',285),
  ('factor -> NUMBER','factor',1,'p_factor','parser_rules.py',286),
  ('factor -> STRING','factor',1,'p_factor','parser_rules.py',287),
  ('factor -> function_call','factor',1,'p_factor','parser_rules.py',288),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser_rules.py',307),
  ('argument_list -> arg_items','argument_list',1,'p_argument_list','parser_rules.py',314),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser_rules.py',315),
  ('arg_items -> arg_items COMMA expression','arg_items',3,'p_arg_items','parser_rules.py',321),
  ('arg_items -> expression','arg_items',1,'p_arg_items','parser_rules.py',322),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',334),
]
